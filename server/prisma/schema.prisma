// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id @map("_id") @db.ObjectId @default(auto()) 
  fullName      String 
  email         String @unique
  password      String
  isVerified    Boolean @default(false)
  socialLinks   Socials[] 
  organisationCreated Organisation?
  memberId Member?
}

model Organisation {
  id          String @id @map("_id") @db.ObjectId @default(auto()) 
  name        String
  description String
  logoUrl     String 
  workspaces  Workspace[]
  createdById String @db.ObjectId @unique
  user User @relation(references: [id], fields: [createdById])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  members Member[]
}

model Workspace {
  id              String @id @map("_id") @db.ObjectId @default(auto()) 
  name            String
  organisationId  String @db.ObjectId
  organisation    Organisation @relation(fields: [organisationId],references: [id])
  // tasks Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
}

model Member{
  id String @db.ObjectId @id @default(auto()) @map("_id")
  role String @default("USER")
  userId String @db.ObjectId @unique
  user User @relation(fields: [userId], references: [id])
  organisationId String @db.ObjectId
  organisation Organisation @relation(fields: [organisationId], references: [id])
}

// model Task{
//   id String @db.ObjectId @id @default(auto()) @map("_id")
//   title String
//   description String
//   category TaskType
//   type String
//   etc DateTime
//   status Int @default(-2)
//   workspaceId String @db.ObjectId
//   workspace Workspace @relation(fields: [workspaceId], references: [id])
//   assignedBy String @db.ObjectId 
//   assignedByMember Member @relation("CreatedTasks",fields: [assignedBy], references: [id])
//   assignedTo String @db.ObjectId
//   assignedToMember Member @relation("AssignedTasks",fields: [assignedTo], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())
//   deletedAt DateTime?
// }


type Socials{
  name String
  link String
}
enum TaskType {
  Bug
  Feature
  Task
  Improvement
}